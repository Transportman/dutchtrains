/*
 *  Copyright (C) 2012 Jasper Vries
 *  This file is part of The Dutch Trainset 2
 *  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 *  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// define the newgrf
grf {
	grfid:	"TM\02\01";
	name:	string(STR_GRF_NAME);
	desc:	string(STR_GRF_DESCRIPTION);
    url:    string(STR_GRF_URL);
	version:		REPO_REVISION;
	min_compatible_version:	7823;
    param {
        param_vehicle_names {
            type:   bool;
            name:   string(STR_PARAM_VEHICLE_NAMES);
            desc:   string(STR_PARAM_VEHICLE_NAMES_DESC);
            def_value: 0;
        }
    }
    param {
        param_disable_original {
            type:   int;
            name:   string(STR_PARAM_DISABLE_ORIGINAL);
            desc:   string(STR_PARAM_DISABLE_ORIGINAL_DESC);
            min_value: 0;
            max_value: 7;
            def_value: 0;
            names: {
                        0: string(STR_PARAM_DISABLE_ORIGINAL_000);
                        1: string(STR_PARAM_DISABLE_ORIGINAL_100);
                        2: string(STR_PARAM_DISABLE_ORIGINAL_010);
                        3: string(STR_PARAM_DISABLE_ORIGINAL_110);
                        4: string(STR_PARAM_DISABLE_ORIGINAL_001);
                        5: string(STR_PARAM_DISABLE_ORIGINAL_101);
                        6: string(STR_PARAM_DISABLE_ORIGINAL_011);
                        7: string(STR_PARAM_DISABLE_ORIGINAL_111);
            };
        }
    }
    param {
        param_purchase_cost {
            type:   int;
            name:   string(STR_PARAM_PURCHASE_COST);
            desc:   string(STR_PARAM_PURCHASE_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
    param {
        param_running_cost {
            type:   int;
            name:   string(STR_PARAM_RUNNING_COST);
            desc:   string(STR_PARAM_RUNNING_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
	param {
		param_track_power {
			type:	int;
			name:	string(STR_PARAM_TRACK_POWER);
			desc:	string(STR_PARAM_TRACK_POWER_DESC);
			min_value: 0;
			max_value: 1;
			def_value: 1;
			names: {
						0: string(STR_PARAM_TRACK_POWER_OFF);
						1: string(STR_PARAM_TRACK_POWER_ON);
			};
		}
	}	
    param {
        param_loading_speed {
            type:   int;
            name:	string(STR_PARAM_LOADING_SPEED);
			desc:	string(STR_PARAM_LOADING_SPEED_DESC);
			min_value: 0;
			max_value: 2;
			def_value: 1;
			names: {
						0: string(STR_PARAM_LOADING_SPEED_SLOW);
						1: string(STR_PARAM_LOADING_SPEED_MEDIUM);
						2: string(STR_PARAM_LOADING_SPEED_FAST);
			};
        }
    }
    param {
        param_fictional {
            type:   bool;
            name:   string(STR_PARAM_FICTIONAL);
            desc:   string(STR_PARAM_FICTIONAL_DESC);
            def_value: 1;
        }
    }
}

//check for OpenTTD and version
if (ttd_platform != PLATFORM_OPENTTD) {
    //requires OpenTTD
    error(FATAL, USED_WITH, "OpenTTD");
}
else {
    //check for OpenTTD version
    if (openttd_version < version_openttd(1, 4, 0)) {
        //requires OpenTTD version
        error(FATAL, REQUIRES_OPENTTD, "1.4.0");
    }
}

//Block loading with the old set
if (grf_current_status("\FB\FB\06\01") || grf_future_status("\FB\FB\06\01")) {
    //requires OpenTTD
    error(FATAL, string(STR_ERROR_OLD_VERSION));
}

//set base cost multiplier for this set
basecost {
	PR_BUILD_VEHICLE_TRAIN:   -1 + param_purchase_cost - 4;
	PR_BUILD_VEHICLE_WAGON:    1 + param_purchase_cost - 4;
	PR_RUNNING_TRAIN_STEAM:    2 + param_running_cost  - 4;
	PR_RUNNING_TRAIN_DIESEL:   2 + param_running_cost  - 4;
	PR_RUNNING_TRAIN_ELECTRIC: 2 + param_running_cost  - 4;
}

//set depot vehicle width to 32px to avoid overlap
train_width_32_px = 1;
//align train properly in depot window
traininfo_y_offset = 2;
